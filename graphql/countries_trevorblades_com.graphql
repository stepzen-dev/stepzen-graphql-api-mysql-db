"""
fields for fetching information from tables "sz_continents", "sz_continent", "sz_countries", "sz_country", "sz_CountryWithGDP", "sz_languages", "sz_language".
"""
type Query {
  sz_continents(filter: sz_ContinentFilterInput): [sz_Continent!]!
    @graphql(
      endpoint: "https://countries.trevorblades.com/"
      prefix: { value: "sz_", includeRootOperations: true }
    )
  sz_continent(code: ID!): sz_Continent
    @graphql(
      endpoint: "https://countries.trevorblades.com/"
      prefix: { value: "sz_", includeRootOperations: true }
    )
  sz_countries(filter: sz_CountryFilterInput): [sz_Country!]!
    @graphql(
      endpoint: "https://countries.trevorblades.com/"
      prefix: { value: "sz_", includeRootOperations: true }
    )
  sz_country(code: ID!): sz_Country
    @graphql(
      endpoint: "https://countries.trevorblades.com/"
      prefix: { value: "sz_", includeRootOperations: true }
    )
  sz_CountryWithGDP(code: ID!): sz_CountryWithGDP
    @graphql(
      endpoint: "https://countries.trevorblades.com/"
      prefix: { value: "sz_", includeRootOperations: true }
    )
  sz_languages(filter: sz_LanguageFilterInput): [sz_Language!]!
    @graphql(
      endpoint: "https://countries.trevorblades.com/"
      prefix: { value: "sz_", includeRootOperations: true }
    )
  sz_language(code: ID!): sz_Language
    @graphql(
      endpoint: "https://countries.trevorblades.com/"
      prefix: { value: "sz_", includeRootOperations: true }
    )
    

}

input sz_ContinentFilterInput {
  code: sz_StringQueryOperatorInput
}

input sz_StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

"""
fields for all continent information of type sz_Continent
"""
type sz_Continent {
  code: ID!
  name: String!
  countries: [sz_Country!]!
}

"""
fields for all country information of type sz_Country
"""
type sz_Country {
  code: ID!
  name: String!
  native: String!
  phone: String!
  continent: sz_Continent!
  capital: String
  currency: String
  languages: [sz_Language!]!
  emoji: String!
  emojiU: String!
  states: [sz_State!]!
}

"""
fields for a country with GDP information of type sz_CountryWithGDP
"""
type sz_CountryWithGDP {
  code: ID!
  name: String!
  native: String!
  phone: String!
  continent: sz_Continent!
  capital: String
  currency: String
  languages: [sz_Language!]!
  emoji: String!
  emojiU: String!
  states: [sz_State!]!
  GDP: Int
}

"""
fields for all language information of type sz_Language
"""
type sz_Language {
  code: ID!
  name: String
  native: String
  rtl: Boolean!
}

"""
fields for all state information of type sz_State
"""
type sz_State {
  code: String
  name: String!
  country: sz_Country!
}

input sz_CountryFilterInput {
  code: sz_StringQueryOperatorInput
  currency: sz_StringQueryOperatorInput
  continent: sz_StringQueryOperatorInput
}

input sz_LanguageFilterInput {
  code: sz_StringQueryOperatorInput
}

enum sz_CacheControlScope {
  PUBLIC
  PRIVATE
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar sz_Upload
